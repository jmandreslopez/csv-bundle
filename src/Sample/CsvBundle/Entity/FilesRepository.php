<?php

namespace Sample\CsvBundle\Entity;

use Sample\CsvBundle\Entity\SharedRepository;
use Sample\CsvBundle\Entity\Files;

/**
 * FilesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FilesRepository extends SharedRepository
{
    /**
     * Return Pagination Query
     *
     * @used
     * - Manager::getPaginationQuery
     * @return query
     */
    public function getPaginationQuery()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('f, f.id, t.description, s.name, p.label, f.name, f.status, f.createdAt')
            ->from($this->getEntityName(), 'f')
            ->leftJoin('f.fileType', 't')
            ->leftJoin('f.source', 's')
            ->leftJoin('f.period', 'p')
            ->where('f.status != :status')
            ->setParameter('status', 'disabled')
            ->orderBy('f.id', 'ASC')
            ->getQuery();
    }

    /**
     * Find if any file uploaded
     * is already finished and change
     * the status to 'Acknowledge'
     *
     * @used
     * - UploadController::statusAction
     * @return integer
     */
    public function findAcknowledge()
    {
        // File Objects
        $fileRows = $this->findBy(array(
            'status' => 'acknowledge'
        ));

        $count = count($fileRows);

        foreach ($fileRows as $fileRow) {
            $fileRow->setStatus('done');
            $this->getEntityManager()->persist($fileRow);
        }
        $this->getEntityManager()->flush();

        return $count;
    }

    /**
     * Return Files that
     * are not Pending
     *
     * @used
     * - ImportCommand::_removeFiles
     * @return objects array
     */
    public function getNotPending()
    {
        return $this->findBy(array(
            'status' => array('done', 'disabled')
        ));
    }

    /**
     * Return Multiple Files
     *
     * @used
     * - ImportCommand::_importMultiple
     * @return objects array
     */
    public function getMultiple()
    {
        return $this->findBy(array(
            'fileTypeId' => Files::$fileTypeMultiple,
            'status'     => 'pending'
        ));
    }

    /**
     * Return CSV Files
     *
     * @used
     * - ImportCommand::_importCsv
     * @return objects array
     */
    public function getCsv()
    {
        return $this->findBy(array(
            'fileTypeId' => Files::$fileTypeCsv,
            'status'     => 'pending'
        ));
    }
}
