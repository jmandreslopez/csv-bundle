<?php

namespace Sample\CsvBundle\Entity;

use Sample\CsvBundle\Entity\SharedRepository;
use Sample\CsvBundle\Entity\SourceConfigurations;

/**
 * SourceConfigurationsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SourceConfigurationsRepository extends SharedRepository
{
    /**
     * Return Source Configurations
     *
     * @used
     * - SourcesController::configurationAction
     * @param integer $sourceId
     * @param integer $sourceConfigurationTypeId
     * @return \Sample\CsvBundle\Entity\SourceConfigurations
     */
    public function getSourceConfiguration($sourceId, $sourceConfigurationTypeId)
    {
        // Configuration Object
        $configuration = $this->findOneBy(array(
            'sourceId'                  => $sourceId,
            'sourceConfigurationTypeId' => $sourceConfigurationTypeId
        ));

        if (empty($configuration))
        {
            // Source Object
            $source = $this->getEntityManager()
                ->getRepository('SampleCsvBundle:Sources')
                ->find($sourceId);
            if (empty($source)) {
                return false;
            }

            $sourceConfigurationType = $this->getEntityManager()
                ->getRepository('SampleCsvBundle:SourceConfigurationTypes')
                ->find($sourceConfigurationTypeId);

            if (empty($sourceConfigurationType)) {
                return false;
            }

            $configuration = new SourceConfigurations();
            $configuration->setSourceId($source->getId());
            $configuration->setSourceConfigurationTypeId($sourceConfigurationTypeId);
            $configuration->setSetting('-');
            $configuration->setSource($source);
            $configuration->setSourceConfigurationType($sourceConfigurationType);

            $entityManager = $this->getEntityManager();
            $entityManager->persist($configuration);
            $entityManager->flush();
        }

        return $configuration;
    }

    /**
     * Return Source Configurations
     * for Source Id
     *
     * @used
     * - ImportCommand::_importCsv
     * @param integer $sourceId
     * @return objects array
     */
    public function getConfigurations($sourceId)
    {
        return $this->findBy(array(
            'sourceId' => $sourceId
        ));
    }
}
