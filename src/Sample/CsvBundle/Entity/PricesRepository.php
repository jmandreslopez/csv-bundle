<?php

namespace Sample\CsvBundle\Entity;

use Sample\CsvBundle\Entity\SharedRepository;
use Sample\CsvBundle\Entity\Prices;

/**
 * PricesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PricesRepository extends SharedRepository
{
    /**
     * Set Cost to Finish
     *
     * @used
     * - ImportCommand::_importCsv
     * @return boolean
     */
    public function setFinishCost()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->update($this->getEntityName(), 'p')
            ->set('p.status', '?1')
            ->where('p.status = ?2')
            ->setParameter(1, 'finish')
            ->setParameter(2, 'estimated')
            ->getQuery()
            ->execute();
    }

    /**
     * Return Price for Period Id
     *
     * @used
     * - StackedChart::getChart
     * @param integer $periodId
     * @param array $requestParams
     * @param boolean $partial
     * @param integer $sourceId
     * @return float
     */
    public function getFiscalCost($periodId, $requestParams, $partial, $sourceId)
    {
        if ($periodId != 0) {
            $qb = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('SUM(p.price) AS price, s.name AS source')
                ->from($this->getEntityName(), 'p')
                ->leftJoin('p.general', 'g')
                ->leftJoin('g.source', 's');

            $and_cond = $qb->expr()->andx();
            $and_cond->add($qb->expr()->eq('p.periodId', $periodId));
            $and_cond->add($qb->expr()->eq('p.status', $qb->expr()->literal('finish')));
            $and_cond->add($qb->expr()->eq('p.isActive', true));

            if ($partial) {
                $and_cond->add($qb->expr()->eq('g.sourceId', $sourceId));
            }

            $qb->andWhere($and_cond);

            // SourceId
            if (isset($requestParams['sourceId'])) {
                $qb->andWhere('m.sourceId = :sourceId');
                $qb->setParameter('sourceId', $requestParams['sourceId']);
            }

            // Search Topic Ids
            // for the Request Params
            $topicIds = $this->_getTopicIds($requestParams);
            if (!empty($topicIds)) {
                $qb->andWhere('m.topicId IN (:topicIds)');
                $qb->setParameter('topicIds', $topicIds);
            }

            $price = $qb->getQuery()
                ->getSingleResult();

            if (empty($price['price'])) {
                return 0;
            }

            $price['price'] = number_format($price['price'], 2, '.', '');

            if ($partial) {
                return $price;
            } else {
                return $price['price'];
            }
        } else {
            return 0;
        }
    }

    /**
     * Delete Data
     *
     * @used
     * - ManagerController::deleteAction
     * @param array $params
     * @return bool
     */
    public function deleteData($params)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->update($this->getEntityName(), 'p')
            ->set('p.isActive', ':isActive')
            ->set('p.status', ':status')
            ->where('p.periodId = :periodId')
            ->andWhere('p.generalId IN (SELECT g.id FROM SampleCsvBundle:General g WHERE g.sourceId = :sourceId)')
            ->setParameters(array(
                'isActive' => false,
                'status'   => 'deleted',
                'periodId' => $params['periodId'],
                'sourceId' => $params['sourceId']
            ))
            ->getQuery()
            ->execute();
    }
}
