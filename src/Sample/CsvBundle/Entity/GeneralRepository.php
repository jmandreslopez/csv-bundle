<?php

namespace Sample\CsvBundle\Entity;

use Sample\CsvBundle\Entity\SharedRepository;
use Sample\CsvBundle\Entity\General;

/**
 * GeneralRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GeneralRepository extends SharedRepository
{
    /**
     * [PRIVATE]
     * Get Active General Results
     *
     * @used
     * - self::_getRequestResults
     * - self::_getAllResults
     * @return objects array
     */
    private function _getActiveResults()
    {
        return $this->findBy(array(
            'isActive' => true
        ));
    }

    /**
     * [PRIVATE]
     * Get Topic ID In General Results
     *
     * @used
     * - self::_getAllResults
     * @param array $topicsIn
     * @return objects array
     */
    private function _getInResults($topicsIn)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('g')
            ->from($this->getEntityName(), 'g')
            ->where('g.topicId IN (:topicsIn)')
            ->andWhere('g.isActive = true')
            ->setParameters(array(
                'topicsIn' => $topicsIn
            ))
            ->getQuery()
            ->getResult();
    }

    /**
     * [PRIVATE]
     * Get All General Results
     *
     * @used
     * - self::_getRequestResults
     * @param array $topicsIn
     * @return objects array
     */
    private function _getAllResults($topicsIn)
    {
        if (in_array(General::$allField, $topicsIn)) {
            $results = $this->_getActiveResults();
        } else {
            $results = $this->_getInResults($topicsIn);
        }

        return $results;
    }

    /**
     * [PRIVATE]
     * Get General Results
     * for the Request Params
     *
     * @used
     * - self::getGenerals
     * @param array $requestParams
     * @return objects array
     */
    private function _getRequestResults($requestParams)
    {
        // Franchise
        $franchise = $this->_isEmpty($requestParams['franchise']);

        // Topic Id
        $topicId = $this->_isEmpty($requestParams['topicId']);

        // Topic Name
        $topicName = $this->_isEmpty($requestParams['topicName']);

        if (empty($topicId) && empty($topicName)) {

            // Is Franchise Empty?
            if (!empty($franchise)) {

                // Get Franchises Topic Ids Array
                $topicsIds = $this->_getFranchisesInResults($franchise);

                $return = $this->_getAllResults($topicsIds);

            } else {
                $return = $this->_getActiveResults();
            }
        } else {

            // Convert TopicNames into TopicIds
            $topicName = $this->_getTopicNameIds($topicName);

            // Merge Arrays
            $topicsIn = array_unique(array_merge($topicId, $topicName));

            if (!empty($franchise)) {
                $topicsIn = $this->_getFranchisesInResults($franchise, $topicsIn);
            }

            $return = $this->_getAllResults($topicsIn);
        }

        return $return;
    }

    /**
     * Return General Rows
     *
     * @used
     * - GraphController::dataAction
     * @param array $requestParams
     * @param string $path
     * @param type $flag
     * @return type
     */
    public function getGenerals($requestParams, $path, $flag = true)
    {
        // General Results
        $generals = $this->_getRequestResults($requestParams);

        // Periods
        $periods = array_reverse($this->getEntityManager()
            ->getRepository('SampleCsvBundle:Periods')
            ->getPeriods($requestParams['periodInterval']));

        // Rows
        $i = 0;
        $data = array();
        foreach ($generals as $general)
        {
            // Source Object
            $source = $general->getSource();

            $data[$i]['Topic Name'] = $general->getTopicName();
            $data[$i]['Topic ID'] = $general->getTopicId();
            $data[$i]['Category'] = $source->getSourceType()->getType();
            $data[$i]['Source'] = $source->getName();

            foreach ($periods as $period)
            {
                // Price Array
                $price = $this->_getPrice(
                    $general->getId(),
                    $period['id']
                );

                // Cost
                $cost = ($price != '-') ? $price['price'] : '-';

                // Status
                $status = ($price != '-') ? $price['status'] : '';

                if ($flag) {
                    switch ($status)
                    {
                        case 'estimated':       $data[$i][$period['label']] = $this->_formatEstimated($cost);
                                                break;

                        case 'finish':          $data[$i][$period['label']] = 
                                                    $this->_formatFinish(array(
                                                        'sourceId'   => $source->getId(),
                                                        'periodId'   => $period['id'],
                                                        'topicId'    => $general->getTopicId(),
                                                        'finishCost' => $cost
                                                    ),
                                                    $path
                                                );
                                                break;

                        default:                $data[$i][$period['label']] = '0';
                                                break;
                    }
                } else {
                    $data[$i][$period['label']] = $cost;
                }
            }

            $i++;
        }

        return array(
            'data' => $data
        );
    }

    /**
     * [PRIVATE]
     * Return the Price for
     * the Period
     *
     * @param integer $generalId
     * @param integer $periodId
     * @return string
     */
    private function _getPrice($generalId, $periodId)
    {
        if ($periodId != 0) {

            // Price Object
            $price = $this->getEntityManager()
                ->getRepository('SampleCsvBundle:Prices')
                ->findOneBy(array(
                    'generalId' => $generalId,
                    'periodId'  => $periodId
                ));

            if (!empty($price)) {
                $generalRow = array(
                    'cost'   => '$'.number_format($price->getPrice(), 0, '.', ','),
                    'status' => $price->getStatus()
                );
            } else {
                $generalRow = '-';
            }
        } else {
            $generalRow = '-';
        }

        return $generalRow;
    }

    /**
     * [PRIVATE]
     * Return HTML format for an Estimated
     *
     * @used
     * - self::getGenerals
     * @param string $estimated
     * @return html
     */
    private function _formatEstimated($estimated)
    {
        return '<span class="estimated-tooltip text-danger" data-toggle="tooltip" data-placement="right" title="Estimated Price">'.$estimated.'</span>';
    }

    /**
     * [PRIVATE]
     * Return HTML format for a Finish Cost
     *
     * @used
     * - self::getGenerals
     * @param array $row
     * @param string $path
     * @return html
     */
    private function _formatFinish($row, $path)
    {
        return '<a href="'.$path.'?v='.$row['sourceId'].'&f='.$row['periodId'].'&p='.urlencode($row['topicId']).'" target="_blank">'.$row['finishCost'].'</a>';
    }

    /**
     * Return the Topic Name for the
     * Source Id & Topic Id
     *
     * @used
     * - Shared::getTopicName
     * @param array $params
     * @return string
     */
    public function getTopicName($params)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('g.topicName')
            ->from($this->getEntityName(), 'g')
            ->where('m.sourceId = :sourceId')
            ->andWhere('g.topicId = :topicId')
            ->andWhere('g.isActive = true')
            ->setParameters(array(
                'sourceId'  => $params['sourceId'],
                'topicId' => $params['topicId']
            ))
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleScalarResult();
    }
}
