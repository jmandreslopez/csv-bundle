<?php

namespace Sample\CsvBundle\Entity;

use Sample\CsvBundle\Entity\SharedRepository;
use Sample\CsvBundle\Entity\Periods;

/**
 * PeriodsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PeriodsRepository extends SharedRepository
{
    /**
     * Return Period or
     * create a new one
     *
     * @used
     * - UploadListener::_createRecord
     * @param type $month
     * @param type $year
     * @return \Sample\CsvBundle\Entity\Periods
     */
    public function getPeriod($month, $year)
    {
        $period = $this->findOneBy(array(
            'month' => date('m', strtotime($month)),
            'year'  => $year
        ));

        if (empty($period)) {
            $period = new Periods();
            $period->setMonth(date('m', strtotime($month)));
            $period->setYear($year);
            $period->setLabel('FY'.$year.'-'.strtoupper($month));
            $period->setIsActive(true);

            $entityManager = $this->getEntityManager();
            $entityManager->persist($period);
            $entityManager->flush();
        }

        return $period;
    }

    /**
     * Return Periods in the
     * Period Interval
     *
     * @used
     * - Shared::getPeriods
     * @param array $periodInterval
     * @return array
     */
    public function getPeriods($periodInterval)
    {
        $start = $periodInterval['start'];
        $end = $periodInterval['end'];

        $i = 0;
        $periods = array();
        $month = $start['m'];
        for ($year = $start['y']; $year <= $end['y']; $year++)
        {
            while ($month < 13)
            {
                $periods[$i] = array(
                    'label' => strtoupper(date('M', mktime(0, 0, 0, $month, 1))).$year,
                    'month' => ($month < 10) ? '0'.$month : $month,
                    'year'  => substr($year, -2),
                    'id'    => 0
                );

                if ($month == $end['m'] && $year == $end['y']) {
                    break;
                }

                $i++;
                $month++;
            }

            // Restart months
            $month = 1;
        }

        // Update Ids
        $periodIds = array();
        foreach ($periods as $period) {
            $periodObject = $this->getEntityManager()
                ->getRepository('SampleCsvBundle:Periods')
                ->findOneBy(array(
                    'month' => $period['month'],
                    'year'  => $period['year']
                ));

            if (!empty($periodObject)) {
                $period['id'] = $periodObject->getId();
            }

            // New Element
            $periodIds[] = $period;
        }

        return $periodIds;
    }
}
